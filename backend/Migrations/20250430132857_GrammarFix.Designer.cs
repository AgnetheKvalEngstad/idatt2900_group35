// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(BackendDbContext))]
    [Migration("20250430132857_GrammarFix")]
    partial class GrammarFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.models.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PointsNeeded")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bonus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Løs inn denne koden xyz på denne nettsiden for å få et år med gratis antivirusprogram",
                            Icon = "Shield",
                            PointsNeeded = 30,
                            Title = "Et år med gratis antivirusprogram"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Løs inn denne koden xyz på denne nettsiden for å få et år med gratis VPN",
                            Icon = "VpnLock",
                            PointsNeeded = 60,
                            Title = "Et år med gratis VPN"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Løs inn denne koden xyz på denne nettsiden for å få en profesjonell sikkerhetsruter",
                            Icon = "Router",
                            PointsNeeded = 90,
                            Title = "En profesjonell sikkerhetsruter"
                        });
                });

            modelBuilder.Entity("backend.models.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ProgressPercentage")
                        .HasColumnType("double precision");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TopicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Progresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProgressPercentage = 0.5,
                            TopicId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CorrectOption")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Options")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrectAnswer = "false",
                            QuestionText = "Er passord123 et bra passord?",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 2,
                            CorrectAnswer = "true",
                            QuestionText = "Er (JGAgh3)4^ecAvVC et bra passord?",
                            TaskId = 1
                        },
                        new
                        {
                            Id = 3,
                            CorrectOption = "Regjeringen.no",
                            Options = "[\"Regjeringen.no\", \"farliglenke.com\", \"farlig.no\", \"farlig.org\"]",
                            QuestionText = "Hvilke av lenkene er trygge?",
                            TaskId = 2
                        },
                        new
                        {
                            Id = 4,
                            CorrectOption = "Regjeringen.no",
                            Options = "[\"Regjeringen.no\", \"farliglenke.com\", \"farlig.no\", \"farlig.org\"]",
                            QuestionText = "Hvilke av lenkene er trygge?",
                            TaskId = 2
                        },
                        new
                        {
                            Id = 5,
                            CorrectAnswer = "8",
                            QuestionText = "Hva er 4+4",
                            TaskId = 3
                        },
                        new
                        {
                            Id = 6,
                            CorrectAnswer = "10",
                            QuestionText = "Hva er 5+5",
                            TaskId = 3
                        });
                });

            modelBuilder.Entity("backend.models.Reason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("ReasonContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ReasonTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TopicId")
                        .IsUnique();

                    b.ToTable("Reasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRead = false,
                            ReasonContent = "Et godt passord vil holde din informasjon trygg",
                            ReasonTitle = "Hvorfor er det viktig med et godt passord?",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsRead = false,
                            ReasonContent = "Ved å kunne gjenkjenne farlige lenker, kan du tryggere navigere nettet",
                            ReasonTitle = "Hvorfor er det viktig å gjenkjenne farlige lenker?",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsRead = false,
                            ReasonContent = "Utrygge nettsider ",
                            ReasonTitle = "Hvorfor er det viktig å velge trygge nettsider?",
                            TopicId = 3
                        });
                });

            modelBuilder.Entity("backend.models.Subtopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("SubtopicContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TopicId")
                        .IsUnique();

                    b.ToTable("Subtopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRead = false,
                            SubtopicContent = "Passord er sikre når de er xyz",
                            Title = "Hvordan lage et sikkert passord",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsRead = false,
                            SubtopicContent = "Lenken har firmaets faktiske navn og ingen rare tegn",
                            Title = "Hvordan gjenkjenne farlige lenker",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsRead = false,
                            SubtopicContent = "Velg nettsider med gode lenker, sjekk browser",
                            Title = "Hvordan velge trygge nettsider",
                            TopicId = 3
                        });
                });

            modelBuilder.Entity("backend.models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievedPoints")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<string>("TaskContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TopicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AchievedPoints = 0,
                            IsDone = false,
                            TaskContent = "Content",
                            TaskType = "TrueFalse",
                            Title = "Er dette trygge passord?",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            AchievedPoints = 0,
                            IsDone = false,
                            TaskContent = "Content",
                            TaskType = "MultipleChoice",
                            Title = "Hvilke av lenkene er trygge?",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 3,
                            AchievedPoints = 0,
                            IsDone = false,
                            TaskContent = "Content",
                            TaskType = "Input",
                            Title = "Hva med denne nettsiden er utrygt",
                            TopicId = 3
                        });
                });

            modelBuilder.Entity("backend.models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SkillLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "Lock",
                            SkillLevel = "Beginner",
                            Title = "Lag et sikkert passord",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Icon = "Link",
                            SkillLevel = "Intermediate",
                            Title = "Farlige lenker",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Icon = "WebAsset",
                            SkillLevel = "Expert",
                            Title = "Velg trygge nettsider",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("backend.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("backend.models.Progress", b =>
                {
                    b.HasOne("backend.models.Topic", "Topic")
                        .WithOne("Progress")
                        .HasForeignKey("backend.models.Progress", "TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.models.Question", b =>
                {
                    b.HasOne("backend.models.Task", "Task")
                        .WithMany("Questions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("backend.models.Reason", b =>
                {
                    b.HasOne("backend.models.Topic", "Topic")
                        .WithOne("Reason")
                        .HasForeignKey("backend.models.Reason", "TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("backend.models.Subtopic", b =>
                {
                    b.HasOne("backend.models.Topic", "Topic")
                        .WithOne("Subtopic")
                        .HasForeignKey("backend.models.Subtopic", "TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("backend.models.Task", b =>
                {
                    b.HasOne("backend.models.Topic", "Topic")
                        .WithOne("Task")
                        .HasForeignKey("backend.models.Task", "TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.models.User", null)
                        .WithMany("Tasks")
                        .HasForeignKey("UserId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("backend.models.Topic", b =>
                {
                    b.HasOne("backend.models.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.models.Task", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("backend.models.Topic", b =>
                {
                    b.Navigation("Progress")
                        .IsRequired();

                    b.Navigation("Reason")
                        .IsRequired();

                    b.Navigation("Subtopic")
                        .IsRequired();

                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("backend.models.User", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Topics");
                });
#pragma warning restore 612, 618
        }
    }
}
